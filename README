Project summaries:

ANN:
The artificial neural network project. Instead of forward and backward passes, I decided to use recurrence. The network can be tested on two different datasets, by changing which part of the main method is commented out.
The network doesn't seem to converge too well with more than one hidden layer, and I was not able to find the reason behind it.

GeneticAlgorithm:
The genetic algorithm follows the ideas from class. However, to make it more robust, I decided to change the fitness function. Right now, I calculate the total distance in color space for each image and subtract this number from the greatest distance in population. This fitness function seems to converge faster. I still use the inverse distance to display fitness.
The algorithm mutates both positions and colors of the polygons, however it does not completely randomize them. Instead, it modifies them by a random value in a range defined by algorithm's constants.

MarioAI:
Mario has received a large number of helper functions to analyze its environment. However, it still only passes level 0.

Othello:
The bot uses a standard minimax with alpha-beta pruning, and multiple weighted heuristics:
- Frontier size
- Stable stones count (bugged)
- Volatile stones count
- Number of stones

SlidingPuzzle:
Iterative deepening, BFS and DFS are stored in myBot.java. I have created both recursive and iterative DFS.
AStar is stored in AStarBot.java and uses Manhattan distance heuristics

kmeans:
KMeans clustering algorithm. Converts the data to a numpy array, and performs clustering as described in class. I greatly improved performance, however the movies still seem a little unrelated to me

regression:
A fairly robust linear regression model which normalizes data, and then puts it back to the original ranges. It manages to get good approximation in a very few iterations (less than 10)
